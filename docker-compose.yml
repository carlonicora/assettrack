# =============================================================================
# ASSETTRACK MONOREPO - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# This docker-compose.yml references environment variables from the root .env file
# It can also work with Coolify where variables are injected via Coolify's UI
#
# IMPORTANT: Infrastructure services (Neo4j, Redis, MinIO) are expected to run
# externally and are configured via the .env file connection strings.
#
# Usage:
#   docker compose up                     # Start all three services (api, worker, web)
#   docker compose up api                 # Start only API service
#   docker compose up worker              # Start only Worker service
#   docker compose up web                 # Start only Web service
#   docker compose up api worker          # Start API and Worker services
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # API Server (NestJS Backend)
  # ---------------------------------------------------------------------------
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: ${DOCKER_BUILD_TARGET:-development}
    container_name: assettrack-api
    ports:
      - "${API_PORT:-3400}:${API_PORT:-3400}"
    environment:
      # Build & Application Mode
      - DOCKER_BUILD_TARGET=${DOCKER_BUILD_TARGET:-development}
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-3400}
      - API_URL=${API_URL}
      - API_PORT=${API_PORT:-3400}

      # Database - Use .env values (external services)
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_DATABASE=${NEO4J_DATABASE}

      # Cache & Queue - Use .env values (external services)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - QUEUE=${QUEUE}

      # Cache Configuration
      - CACHE_ENABLED=${CACHE_ENABLED}
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL}
      - CACHE_SKIP_PATTERNS=${CACHE_SKIP_PATTERNS}

      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}

      # Web Push - VAPID
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_EMAIL=${VAPID_EMAIL}

      # Email Configuration
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - EMAIL_API_KEY=${EMAIL_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_SECURE=${EMAIL_SECURE}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}

      # Logging - Loki
      - LOKI_ENABLED=${LOKI_ENABLED}
      - LOKI_HOST=${LOKI_HOST}
      - LOKI_USERNAME=${LOKI_USERNAME}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
      - LOKI_APP_LABEL=${LOKI_APP_LABEL}

      # Tracing - Tempo
      - TEMPO_ENABLED=${TEMPO_ENABLED}
      - TEMPO_ENDPOINT=${TEMPO_ENDPOINT}
      - TEMPO_SERVICE_NAME=${TEMPO_SERVICE_NAME}
      - TEMPO_SERVICE_VERSION=${TEMPO_SERVICE_VERSION}

      # Object Storage - S3/MinIO - Use .env values (external services)
      - S3_TYPE=${S3_TYPE}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION}

      # Rate Limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS}
      - IP_RATE_LIMIT_REQUESTS=${IP_RATE_LIMIT_REQUESTS}

      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_ORIGIN_PATTERNS=${CORS_ORIGIN_PATTERNS}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS}
      - CORS_METHODS=${CORS_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
      - CORS_PREFLIGHT_CONTINUE=${CORS_PREFLIGHT_CONTINUE}
      - CORS_OPTIONS_SUCCESS_STATUS=${CORS_OPTIONS_SUCCESS_STATUS}
      - CORS_LOG_VIOLATIONS=${CORS_LOG_VIOLATIONS}

      # UPC Database
      - UPC_ENABLED=${UPC_ENABLED}
      - UPC_API_KEY=${UPC_API_KEY}
    volumes:
      - ./.env:/app/.env:ro
      - ./apps/api/src:/app/apps/api/src
      - ./packages/shared:/app/packages/shared
      - api-node-modules:/app/node_modules
      - api-app-node-modules:/app/apps/api/node_modules
    networks:
      - assettrack-network

  # ---------------------------------------------------------------------------
  # Worker (Background Job Processing)
  # ---------------------------------------------------------------------------
  worker:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: ${DOCKER_BUILD_TARGET:-development}
    container_name: assettrack-worker
    environment:
      # Build & Application Mode
      - DOCKER_BUILD_TARGET=${DOCKER_BUILD_TARGET:-development}
      - NODE_ENV=${NODE_ENV:-development}

      # Database - Use .env values (external services)
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_DATABASE=${NEO4J_DATABASE}

      # Cache & Queue - Use .env values (external services)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - QUEUE=${QUEUE}

      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}

      # Web Push - VAPID
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_EMAIL=${VAPID_EMAIL}

      # Email Configuration
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - EMAIL_API_KEY=${EMAIL_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_SECURE=${EMAIL_SECURE}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}

      # Logging - Loki
      - LOKI_ENABLED=${LOKI_ENABLED}
      - LOKI_HOST=${LOKI_HOST}
      - LOKI_USERNAME=${LOKI_USERNAME}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
      - LOKI_APP_LABEL=${LOKI_APP_LABEL}

      # Tracing - Tempo
      - TEMPO_ENABLED=${TEMPO_ENABLED}
      - TEMPO_ENDPOINT=${TEMPO_ENDPOINT}
      - TEMPO_SERVICE_NAME=${TEMPO_SERVICE_NAME}
      - TEMPO_SERVICE_VERSION=${TEMPO_SERVICE_VERSION}

      # Object Storage - S3/MinIO - Use .env values (external services)
      - S3_TYPE=${S3_TYPE}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION}

      # UPC Database
      - UPC_ENABLED=${UPC_ENABLED}
      - UPC_API_KEY=${UPC_API_KEY}
    volumes:
      - ./.env:/app/.env:ro
      - ./apps/api/src:/app/apps/api/src
      - ./packages/shared:/app/packages/shared
      - worker-node-modules:/app/node_modules
      - worker-app-node-modules:/app/apps/api/node_modules
    networks:
      - assettrack-network
    # Worker uses same Dockerfile as API but different commands based on DOCKER_BUILD_TARGET
    command: >
      sh -c '
      if [ "$${DOCKER_BUILD_TARGET:-development}" = "production" ]; then
        cd /app/apps/api && node --max-old-space-size=6144 dist/main --mode=worker;
      else
        pnpm --filter assettrack-api run start:worker:dev;
      fi
      '

  # ---------------------------------------------------------------------------
  # Web Application (Next.js Frontend)
  # ---------------------------------------------------------------------------
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: ${DOCKER_BUILD_TARGET:-development}
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_ADDRESS=${NEXT_PUBLIC_ADDRESS}
        - NEXT_PUBLIC_VAPID_PUBLIC_KEY=${NEXT_PUBLIC_VAPID_PUBLIC_KEY}
    container_name: assettrack-web
    ports:
      - "${PORT:-3401}:${PORT:-3401}"
    environment:
      # Build & Application Configuration
      - DOCKER_BUILD_TARGET=${DOCKER_BUILD_TARGET:-development}
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3401}
      - APP_URL=${APP_URL}

      # API Connection
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_ADDRESS=${NEXT_PUBLIC_ADDRESS}
      - API_INTERNAL_URL=${API_INTERNAL_URL:-http://api:3400/}

      # Web Push - VAPID
      - NEXT_PUBLIC_VAPID_PUBLIC_KEY=${NEXT_PUBLIC_VAPID_PUBLIC_KEY}

      # Image Sources
      - IMAGE_SOURCES=${IMAGE_SOURCES}
    volumes:
      - ./.env:/app/.env:ro
      # Development source code volumes
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
      - ./packages/shared:/app/packages/shared
      # Named volumes for node_modules (both dev and prod need these)
      - web-node-modules:/app/node_modules
      - web-app-node-modules:/app/apps/web/node_modules
      # .next volume ONLY for development (production builds .next into image)
      # Uncomment ONLY when DOCKER_BUILD_TARGET=development
      # - web-next:/app/apps/web/.next
    networks:
      - assettrack-network

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
volumes:
  # Application (prevent node_modules conflicts)
  api-node-modules:
    driver: local
  api-app-node-modules:
    driver: local
  worker-node-modules:
    driver: local
  worker-app-node-modules:
    driver: local
  web-node-modules:
    driver: local
  web-app-node-modules:
    driver: local
  web-next:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  assettrack-network:
    driver: bridge
